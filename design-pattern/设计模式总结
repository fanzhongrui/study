模式分类
    设计原则：设计模式（总纲）
    构建型：  单例模式  简单工厂模式  工厂方法模式  抽象工厂模式  建造者模式  原型模式
    结构型：  代理模式  适配器模式  装饰器模式  桥接模式  组合模式  享元模式  外观模式
    行为型：  观察者模式  模板方法模式  命令模式  状态模式  职责链模式 解释器模式 中介者模式  访问者模式  策略模式  备忘录模式  迭代器模式
    
    行为型模式的个数最多，结构型次之，创建型最少
    
    对比维度：
        设计原则：描述每个设计模式都遵循了哪些设计原则，破坏了哪些设计原则。
        常用场景：描述各个设计模式大部分情况下，都会在哪些场景下出现。
        使用概率：主要指在普遍的工作当中，该设计模式出现的频率，若是类库或是开源框架提供的功能中包含该模式，则也会计算其频率。
        复杂度：特指一个设计模式在实现的时候的复杂度，主要的衡量标准是类的数量、类之间的耦合关系。
        变化点：设计模式很大的一个意义在于容纳变化，掌握一个设计模式的变化点是非常重要的一件事
        选择关键点：当选择使用一个设计模式的时候，指出最关键的选择点
        逆鳞：龙有逆鳞，不可触摸，设计模式也有逆鳞，有些地方是不能碰的
        相关设计模式：与其他设计模式的关系
        
        设计原则：
        常用场景：
        使用概率：
        复杂度：
        变化点：
        选择关键点：
        逆鳞：
        相关设计模式：
        
创建型设计模式
    单例模式
        设计原则：无
        常用场景：应用中有对象需要是全局的且唯一
        使用概率：99.99999%
        复杂度：低
        变化点：无
        选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误
        逆鳞：在以为是单例的情况下，却产生了多个实例
        相关设计模式：
            原型模式：单例模式只有一个实例，原型模式每拷贝一次都会创造一个新的实例。
            
    简单工厂模式：
        设计原则：遵循单一职责、违背开闭原则
        常用场景：需要在一堆产品中选择其中一个产品
        使用概率：99.99999%
        复杂度：低
        变化点：产品的种类
        选择关键点：一种产品是否可根据某个参数决定它的种类
        逆鳞：工厂类不能正常工作
        相关设计模式：
            工厂方法模式：
        
        
