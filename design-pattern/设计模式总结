模式分类
    设计原则：设计模式（总纲）
    构建型：  单例模式  简单工厂模式  工厂方法模式  抽象工厂模式  建造者模式  原型模式
    结构型：  代理模式  适配器模式  装饰器模式  桥接模式  组合模式  享元模式  外观模式
    行为型：  观察者模式  模板方法模式  命令模式  状态模式  职责链模式 解释器模式 中介者模式  访问者模式  策略模式  备忘录模式  迭代器模式
    
    行为型模式的个数最多，结构型次之，创建型最少
    
    对比维度：
        设计原则：描述每个设计模式都遵循了哪些设计原则，破坏了哪些设计原则。
        常用场景：描述各个设计模式大部分情况下，都会在哪些场景下出现。
        使用概率：主要指在普遍的工作当中，该设计模式出现的频率，若是类库或是开源框架提供的功能中包含该模式，则也会计算其频率。
        复杂度：特指一个设计模式在实现的时候的复杂度，主要的衡量标准是类的数量、类之间的耦合关系。
        变化点：设计模式很大的一个意义在于容纳变化，掌握一个设计模式的变化点是非常重要的一件事
        选择关键点：当选择使用一个设计模式的时候，指出最关键的选择点
        逆鳞：龙有逆鳞，不可触摸，设计模式也有逆鳞，有些地方是不能碰的
        相关设计模式：与其他设计模式的关系
        
        设计原则：
        常用场景：
        使用概率：
        复杂度：
        变化点：
        选择关键点：
        逆鳞：
        相关设计模式：
        
创建型设计模式
    1、单例模式
        设计原则：无
        常用场景：应用中有对象需要是全局的且唯一
        使用概率：99.99999%
        复杂度：低
        变化点：无
        选择关键点：一个对象在应用中出现多个实例是否会引起逻辑上或者是程序上的错误
        逆鳞：在以为是单例的情况下，却产生了多个实例
        相关设计模式：
            原型模式：单例模式只有一个实例，原型模式每拷贝一次都会创造一个新的实例。
            
    2、简单工厂模式：
        设计原则：遵循单一职责、违背开闭原则
        常用场景：需要在一堆产品中选择其中一个产品
        使用概率：99.99999%
        复杂度：低
        变化点：产品的种类
        选择关键点：一种产品是否可根据某个参数决定它的种类
        逆鳞：工厂类不能正常工作
        相关设计模式：
            工厂方法模式：工厂方法模式是简单工厂模式的进一步抽象化，在这两者之间做选择，主要看将工厂进一步抽象化是否有必要，
                通常情况下，如果工厂的作用仅仅是用来制造产品，则没必要使用工厂方法模式。
                
    3、工厂方法模式：
        设计原则：遵循单一职责、依赖倒置、开闭原则
        常用场景：一种场景是希望工厂与产品的种类对客户端保持透明，给客户端提供一致的操作，
                    另外一种是不同的工厂和产品可以提供客户端不同的服务或功能
        使用概率：60%
        复杂度：中低
        变化点：工厂与产品的种类
        选择关键点：工厂类和产品类是否是同生同灭的关系
        逆鳞：无
        相关设计模式：
                抽象工厂模式工厂方法模式与抽象工厂模式最大的区别在于，
                    在工厂方法模式中，工厂创造的是一个产品，而抽象工厂模式中，工厂创造的是一个产品族。
            
    4、抽象工厂模式
        设计原则：遵循单一职责、依赖倒置、开闭原则
        常用场景：需要一个接口可以提供一个产品族，且不必知道产品的具体种类
        使用概率：30%
        复杂度：中
        变化点：工厂与产品的种类
        选择关键点：产品族是否需要一起提供，且是否有一致的接口
        逆鳞：无
        相关设计模式：
                建造者模式：两者都是建造一批对象或者说产品，不同的是两者的目的和实现手段，
                在建造者模式中，是为了复用对象的构建过程而定义了一个指挥者，
                而在抽象工厂模式中，是为了提供一个这批对象的创建接口而定义了抽象工厂接口。
            
    5、建造者模式：
        设计原则：遵循单一职责、开闭原则
        常用场景：需要构建一批构建过程相同但表示不同的产品，而构建过程非常复杂
        使用概率：10%
        复杂度：中
        变化点：产品的表示
        选择关键点：各个产品的构建过程是否相同
        逆鳞：指挥者不能正常工作
        相关设计模式：
    
    6、原型模式
        设计原则：无
        常用场景：需要在运行时动态的创建指定实例种类的对象，或是需要复用其状态
        使用概率：10%
        复杂度：中低
        变化点：无
        选择关键点：创建出来的对象是否可以立即投入使用
        逆鳞：在以为是深度拷贝的情况下，却未实现深度拷贝
        相关设计模式：
            
结构型设计模式
    7、代理模式
        设计原则：体现功能复用
        常用场景：需要修改或屏蔽某一个或若干个类的部分功能，复用另外一部分功能，可使用静态代理，
                若是需要拦截一批类中的某些方法，在方法的前后插入一些一致的操作，假设这些类有一致的接口，可使用JDK的动态代理，否则可使用cglib
        使用概率：99.99999%
        复杂度：中高
        变化点：静态代理没有变化点，动态代理的变化点为具有相同切入点的类
        选择关键点：静态代理选择的关键点是是否要复用被代理的部分功能，
                    动态代理选择的关键点在于能否在将被代理的这一批类当中，找出相同的切入点
        逆鳞：切入点的不稳定
        相关设计模式：
                适配器模式：对于适配器模式当中的定制适配器，它与静态代理有着相似的部分，二者都有复用功能的作用，不同的是，
                        静态代理会修改一部分原有功能，而适配器往往是全部复用，而且在复用时，适配器还会将复用的类适配一个接口
                    
    8、适配器模式
        设计原则：遵循开闭原则、体现功能复用
        常用场景：需要使用一个类的功能，但是该类的接口不符合使用场合要求的接口，可使用定制适配器，
                又或是有一个接口定义的行为过多，则可以定义一个缺省适配器，让子类选择性的覆盖适配器的方法
        使用概率：40%
        复杂度：中
        变化点：无
        选择关键点：定制适配器的选择
        逆鳞：无
        相关设计模式：
                装饰器模式：对于适配器模式中的定制适配器与装饰器模式，二者都是使用组合加继承的手段，不同的是，
                        适配器模式的目的在于适配接口，装饰器模式的目的在于动态的添加功能，且可以叠加
        
    9、装饰器模式
        设计原则：遵循迪米特、单一职责、开闭原则，破坏里氏替换，体现功能复用
        常用场景：一个类需要动态的添加功能，且这些功能可以相互叠加
        使用概率：99.99999%
        复杂度：中
        变化点：动态添加的功能或者说装饰器
        选择关键点：添加的功能是否需要动态组装
        逆鳞：无
        相关设计模式：
        
    10、桥接模式
        设计原则：遵循单一职责、迪米特、开闭原则，体现功能复用
        常用场景：一个对象有多个维度的变化，需要将这些维度抽离出来，让其独立变化
        使用概率：20%
        复杂度：中高
        变化点：维度的扩展与增加
        选择关键点：是否可以将对象拆分成多个不相干的维度
        逆鳞：无
        相关设计模式：
        
    11、组合模式
        设计原则：遵循依赖倒置、开闭原则，破坏接口隔离
        常用场景：当有一个结构可以组合成树形结构，且需要向客户端提供一致的操作接口，使得客户端操作忽略简单元素与复杂元素
        使用概率：30%
        复杂度：中
        变化点：节点的数量
        选择关键点：对外提供一致操作接口的结构是否可以转化为树形结构
        逆鳞：结构不稳定或结构中的节点有递归关系
        相关设计模式：
        
    12、享元模式
        设计原则：无
        常用场景：一些状态相同的对象被大量的重复使用
        使用概率：90%
        复杂度：中
        变化点：无
        选择关键点：被共享的对象是否可以将外部状态提取出来
        逆鳞：没有将外部状态提取完全
        相关设计模式：
        
    13、外观模式
        设计原则：遵循迪米特
        常用场景：一个子系统需要对外提供服务
        使用概率：60%
        复杂度：中
        变化点：无
        选择关键点：子系统对外提供服务是否需要依赖很多的类
        逆鳞：子系统对外提供的服务的变化或子系统本身的不稳定
        相关设计模式：
                中介者模式：二者都是为了处理复杂的耦合关系，不同的是外观模式处理的是类之间复杂的依赖关系，
                        中介者模式处理的是对象之间复杂的交互关系
    
行为型设计模式
    14、观察者模式：
        设计原则：遵循迪米特、开闭原则
        常用场景：需要将观察者与被观察者解耦或者是观察者的种类不确定
        使用概率：40%
        复杂度：中
        变化点：观察者的种类与个数
        选择关键点：观察者与被观察者是否是多对一的关系
        逆鳞：观察者之间有过多的细节依赖
        相关设计模式：
        
    15、模板方法模式
        设计原则：破坏里氏替换，体现功能复用
        常用场景：一批子类的功能有可提取的公共算法骨架
        使用概率：80%
        复杂度：中低
        变化点：算法骨架内各个步骤的具体实现
        选择关键点：算法骨架是否牢固
        逆鳞：无
        相关设计模式：
        
    16、命令模式
        设计原则：遵循迪米特、开闭原则
        常用场景：行为的请求者与行为的处理者耦合度过高
        使用概率：20%
        复杂度：中高
        变化点：命令的种类
        选择关键点：请求者是否不需要关心命令的执行只知道接受者
        逆鳞：命令的种类无限制增长
        相关设计模式：
                职责链模式：容易将二者关联在一起的原因是，二者都是为了处理请求或者命令而存在的，而且二者都是为了将请求者与响应者解耦，
                    不同的是命令模式中，客户端需要知道一个命令的接受者，
        
    17、状态模式
        设计原则：
        常用场景：
        使用概率：
        复杂度：
        变化点：
        选择关键点：
        逆鳞：
        相关设计模式：
        
    18、职责链模式
    19、解释器模式
    20、中介者模式
    21、访问者模式
    22、策略模式
    23、备忘录模式
    24、迭代器模式
