B树
  即二叉搜索树：
  1.所有非叶子节点至多拥有两个儿子（left和right）；
  2.所有节点存储一个关键字；
  3.非叶子节点的左指针指向小于其关键字的子树，右指针指向大于其关键字的子树
  
  B树的搜索，从根节点开始，如果查询的关键字与节点的关键字相等，那么就命中；
    否则，如果查询关键字比节点关键字小，就进入左儿子；如果比节点关键字大，就进入右儿子；
    如果左儿子或右儿子的指针为空，则报告找不到相应的关键字；
  如果B树的所有非叶子节点的左右子树的节点数目均保持差不多（平衡），那么B树的搜索性能逼近二分查找；
    但它比连续内存空间的二分查找的优点是，改变B树结构（插入与删除节点）不需要移动大段的内存数据，甚至通常是常数开销
  但是B树在经过多次插入与删除后，有可能导致不同的结构
  
  实际使用的B树都是在原B树的基础上加上平衡算法，即“平衡二叉树”；
  如何保持B树节点分布均匀的平衡算法是平衡二叉树的关键；
  平衡算法是一种在B树中插入和删除节点的策略；
  
B－树
  是一种多路搜索树（并不是二叉的）：
  1.定义任意非叶子节点最多只有M个儿子，且M>2;
  2.根节点的儿子数为［2，M］
  3.除根节点以外的非叶子节点的儿子数为［M／2，M］；
  4.每个节点存放至少M／2-1（取上整）和至多M－1个关键字；（至少2个关键字）
  5.非叶子节点的关键字个数＝指向儿子的指针个数－1；
  6.非叶子节点的关键字：K［1］，K［2］，。。。，K［M－1］；且K［i］< K[i＋1];
  7.非叶子节点的指针：P［1］，P［2］，。。。，P［M］；其中P［1］指向关键字小于K［1］的子树，P［M］指向关键字大于K［M－1］的子树，其它P［i］指向关键字属于（K［i－1］，K［i］）的子树；
  8.所有叶子节点位于同一层；
  
  B－树的搜索，从根节点开始，对节点内的关键字（有序）序列进行二分查找，如
