1、插入排序
    每次将一个待排序的记录，按其关键字大小插入到前面已经排序好的序列中，直到全部记录插入完成为止。
  
2、希尔排序
    希尔排序是在插入排序基础上改进的。
    首先，插入排序算法对于已经有序的数据进行操作的时候，效率很高，可以达到线性排序的效率。
    其次，插入排序进行排序的时候，每一趟排序只能移动一个数据。所以这样的排序方法相对来说效率比较低
    
    基于此，希尔排序的基本思想是：
    先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，
    分割子序列的方法就是设定一个增量，待当下的每个子序列有序的时候，将增量减一半（除以2，取整），再次进行子序列的排序。
    依次进行，待整个序列中的记录基本上有序的时候，再对全体记录进行依次直接插入排序，
    此时增量减为1，因为直接插入排序在元素基本有序的情况下，效率是很高的。
    
    希尔排序是不稳定排序。希尔排序在按照增量分组后，其组内的排序可以使用插入排序，当然也可以使用冒泡排序、选择排序等等
        public static int ShellSort(int[] a){
		int cnt = 0;
		int h = 1;
		while(h <= a.length/3)h = h*3+1;
		while(h > 0){
			for(int k=h; k<2*h; k++){
				for(int i=k; i < a.length; i+=h){
					if(a[i] < a[i-h]){
						int tmp = a[i];
						int j = i - h;
						while(j >= 0 && tmp < a[j]){
							cnt++;
							a[j+h] = a[j];
							j -= h;
						}
						a[j+h] = tmp;
					}
				}
				System.out.print("cnt:");
				print(a);
			}
			h = (h-1)/3;
		}
		return cnt;
	}
	
3、归并排序
	归并排序是建立在归并操作上的一种有效的排序算法，该算法是基于分治法（Divide and Conquer）思想的。
	将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。
	将两个有序表合并成一个有序表，称为二路归并。
	归并排序最常用的实现方式是借助递归函数实现，也可以使用栈。
	非递归实现的原理：
		首先，需要申请两个栈-stack1,stack；
		第一步，先将我们待排序序列的起始位置s，终点位置e和中间位置m进栈stack1;
		第二步，出栈stack1中的数据，然后将出栈的数据进栈stack。然后判断s是否小于m？
			如果s小于m，则将s作为起始位置，m作为终点位置，（s+m）/2作为中间位置进栈stack1。
			接着判断m+1是否小于e，如果m+1小于e，则将m+1作为起始位置，e作为终点位置，（m+1+e）/2作为中间位置进栈stack1。
		第三步，判断stack1是否为空，如果为空，则进行第四步。如果不为空则重复第二步。
		第四步，出栈stack中的数据，按照出栈数据的起始位置，终点位置和中间位置进行合并。
		第五步，判断栈stack是否为空，如果不为空则重复第四步，如果为空则程序结束。
	public static void MergeSort(int a[], int left, int right, int tmp[]){
		if(left < right){
			int m = left + (right - left)/2;
			MergeSort(a,left,m,tmp);
			MergeSort(a,m+1,right,tmp);
			merge(a,left,m,right,tmp);
		}
	}
	public static void merge(int a[], int left, int m, int right, int tmp[]){
		int i=left, j=m+1, k=0;
		while(i<=m && j<=right){
			if(a[i]<=a[j])tmp[k++]=a[i++];
			else tmp[k++]=a[j++];
		}
		while(i<=m)tmp[k++]=a[i++];
		while(j<=right)tmp[k++]=a[j++];
		i=left; 
		j=0;
		while(j<k)a[i++]=tmp[j++];
	}
