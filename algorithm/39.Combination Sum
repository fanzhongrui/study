
 //39.Combination Sum
public class Solution {
   
	public List<List<Integer>> combinationSum(int[] candidates, int target){
		List<List<Integer>> res = new ArrayList<List<Integer>>();
		List<Integer> t = new ArrayList<Integer>();
		Arrays.sort(candidates);
		getSum(res, t, candidates, 0, target);
		return res;
	}
	public void getSum(List<List<Integer>> res, List<Integer> t, int[] c, int d, int target){
// 		System.out.println("t="+t+" tar="+target+" d="+d);
		if(target == 0 || d == c.length){
			if(target != 0)return;
			List<Integer> tmp = new ArrayList<Integer>(t);
			res.add(tmp);
			return ;
		}
		getSum(res, t, c, d+1, target);
		int x = 0;
		 x = target/c[d];
		if(x!=0){
			for(int i=0; i<x; i++){
				target -= c[d];
				t.add(c[d]);
				getSum(res, t, c, d+1, target);
			}
			for(int i=0;i<x; i++)t.remove(t.size()-1);
		}
	}
}
