                       有序否           允许元素重复否
  Collection              否                是
  List                    是                是
        ｜AbstractSet     否                ｜
  Set—— ｜HashSet         否                ｜——否
        ｜TreeSet         是（二叉树排序）  ｜
          ｜AbstractMap   否                  ｜
  Map——   ｜HashMap       否                  ｜——使用key－value来映射和存储数据，
          ｜TreeMap       是（二叉树排序）    ｜——key必须唯一，value可以重复。
          
  List接口对Collection进行了简单的扩充，它的具体实现类常用的有ArrayList和linkedList。
  可以将任何东西放到一个List容器中，并在需要时从中取出。
  ArrayList从其命名可以看出它是一种类似数组的形式进行存储，因此它的随机访问速度极快。
  LinkedList的内部实现是链表，它适合于在链表中间需要频繁进行插入和删除操作。
  在具体应用时可以根据需要自由选择。
  Iterator只能对容器进行向前遍历，而ListIterator则继承了Iterator的思想，并提供了对List进行双向遍历的方法。
  
  Set接口也是Collection的一种扩展，而与List不同的是，在Set中的对象元素不能重复，也就是说不能把同样的东西两次放入同一个Set容器容器中。
  它的常用具体实现又HashSet和TreeSet类。
  HashSet能快速定位一个元素，但是你放到HashSet中的对象需要实现hashcode（）方法，它使用了前面说过的哈希码的算法。
  TreeSet则是将放入其中的元素按序存放，这就要求放入其中的对象是可排序的，这就用到了集合框架提供的另外两个实用类Comparable和Comparator。
  一个类是可排序的，它就应该实现Comparable接口。
  有时多个类具有相同的排序算法，那就不需要在每个类分别重复定义相同的排序算法，只要实现Comparator接口即可。
  
  集合框架中还有两个很实用的公用类：Collections和Arrays。
  Collections 提供了对一个Collection容器进行诸如排序、复制、查找、填充等一些非常有用的方法，
  Arrays则是对一个数组进行类似的操作。
  
  Map是一种把键对象和值对象进行关联的容器，而一个值对象又可以是一个Map，依次类推，这样就可以形成一个多级映射。
  对于键对象来说，像set一样，一个Map容器中的键对象不允许重复，这是为了保持查找结果的一致性；
  使用过程中，某个键所对应的值对象可能会发生变化，这时会按照最后一次修改的值对象与键对应。
  对于值对象则没有唯一性的要求。可以将任意多个键映射到一个值对象上。
  
  Map有两种比较常用的实现：HashMap和TreeMap。
  HashMap也用到了哈希码算法，以便快速查找一个键，
  TreeMap则是对键按序存放，因此它便有一些扩展的方法，比如firstKey（），lastKey（），还可以从TreeMap中指定一个范围以取得其子Map。
  键和值的关联很简单，用put（Object key，Object Value）方法即可将一个键与一个值对象相关联。
  用get（Object key）可得到与此key对象所对应的值对象。
  
  
  
  
  
