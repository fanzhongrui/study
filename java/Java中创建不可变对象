class:Java中class确切的表示为一个类
object:Java中Object确切的表示为一个对象，也称为类的实例

如果一个类被设计成不可变的类 ，那么这个类的实例化对象也是不可变的。
不可变类：当你获得这个类的一个实例引用时，你不可以改变这个实例的内容。

不可变对象：
    一旦一个类的实例化对象被创建并初始化，那么它就不可以被改变。可以调用访问器方法（getter），复制对象，或者传递对象，但是不允许任何方法改变这个对象的状态。
    包装类（Integer或Float等）和String类是不可变类的代表。
    
    访问器方法（access method）：对成员变量做出访问的方法，如getter()方法
    修改器方法（mutator method）:对成员变量做出修改的方法，如setter()方法
    
定义一个不可变类
    如果我们要自己创建一个不可变类，需要遵守下面的规则：
        将成员变量（field）声明成final并在构造器中初始化。
    对于基本类型的成员变量，用final修饰，一旦它被初始化，就不能改变了。而对于引用类型的成员变量，不能改变它的引用。
    成员变量如果被声明为final，那么构建对象时，必须要初始化这样的域
    
    引用类型是可变的，需要采取一些措施来保证它的不可变性。
    如果只是声明了一个final的可变引用类型，那么这个引用可以去引用外部的类，或者被其他外部类引用。
    这时，要做到：
        1.这些方法不会改变这些可变对象中的内容
        2.不要将这些引用分享到外部供其他类使用，例如，如果对成员变量的引用是可以被其他类改变的，那这些外部类就可以改变这个类中的内容
        3.如果必须要返回一个引用，那么就返回一个对象的深度拷贝，这样尽管返回的对象内容改变了，但也保存着原始的内容。
    只提供访问器方法（如getter方法）不提供修改器方法（如，setter方法）
    如果一定要改变这个对象的内容，那就创建一个新的不可变对象内容做相应的修改，返回修改后对象的引用
    
    声明类是final的。如果一个类可以被继承，那么它的子类可以重载它的方法，并且修改成员变量
    
Java API中不可变类的例子
    以String类为例：
    
    所有在String类中成员变量都被声明成private，这些成员变量都在构造器中构建对象时被初始化。
    trim、concat、substring都可以改变String的对象，为了保证String的不可变性，这些方法都返回的是一个改变相应内容后新的对象。
    String类被声明成final，所以任何类都不能继承，重载它的方法。
    
总结：不可变类的特点：
    这个类被声明成final，不可以被继承，也不可以重载它的方法
    这个类的成员变量都是final并且是私有的
    如果成员变量是一个引用类型，是可变的，那么在他的getter()方法中，返回的是对该对象的拷贝
    
设计一个不可变类最关键的一点：
    注意引用类型的成员变量，如果成员变量的类型是可变的引用类型，就必须要采取必要的措施来保护这个成员变量不会被修改
    
不可变类不足的地方
    为了保证不可变性，不可变类中的方法会创建出一定量的对象的拷贝。
    
String类中trim、concat，或者是在循环中调用substring方法，都会创建一个新的临时的String对象。
Java也提供了Stringbuffer和Stringbuilder的可变类，同String一样，但是却可以改变这个对象的内容。
    
    
    
    
    
    
    
    
    
    
    
    
    
    
