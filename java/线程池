线程池
作用：
  线程池的作用就是限制系统中执行线程的数量。
  根据系统的环境情况，可以自动或手动设置线程数量，达到运行的最佳效果；
  少了浪费系统资源，多了造成系统拥挤效率不高。
  用线程池控制线程数量，其他线程排队等候。一个任务执行完毕，再从队列中取最前面的任务开始执行。
  若队列中没有等待进程，线程池的这一资源处于等待。
  当一个新任务需要运行时，如果线程池中有等待的工作线程，就可以开始运行了；否则进入等待队列。
  
为什么要用线程池：
  1.减少了创建和销毁线程的次数，每个工作线程都可以被重复利用，可执行多个任务。
  2.可以根据系统的承受能力，调整线程池中工作线程的数目，防止因为消耗过多的内存，而把服务器累趴（每个线程需要大约1MB内存，线程开的越多，消耗的内存也就越大，最后死机）。
  
java里线程池的顶级接口是Executor，但是严格意义上讲Executor并不是一个线程池，而只是一个执行线程的工具。
真正的线程池接口是ExecutorService。

比较重要的几个类：
  ExecutorService：真正的线程池接口。
  ScheduledExecutorService:和Timer／TimerTask类似，解决那些需要重复执行的任务
  ThreadPoolExecutor:ExecutorService的默认实现
  ScheduledThreadPoolExecutor:继承ThreadPoolExecutor的ScheduledExecutorService接口实现，周期性任务调度的类实现。
  
线程池配置比较复杂，很有可能配置的线程池不是较优的，因此在Executors类里提供了一些静态工厂，生成一些常用的线程池。
1.newSingleThreadExecutor
  创建一个单线程的线程池。这个线程池只有一个线程在工作，也就是相当于单线程串行执行所有任务。
  如果这个唯一的线程因为异常结束，那么会有一个新的线程来替代它。
  此线程池保证所有任务的执行顺序按照任务的提交顺序执行。
2.newFixedThreadPool
  创建固定大小的线程池。每次提交一个任务就创建一个线程，直到线程达到线程池的最大大小。
  线程池的大小一旦达到最大值就会保持不变，如果某个线程因为执行异常而结束，那么线程池会补充一个新线程。
3.newCachedThreadPool
  创建一个可缓存的线程池。如果线程池的大小超过了处理任务所需要的线程。
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
