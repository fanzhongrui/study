JDK中HashMap.java中有一个函数
  static final int tableSizeFor(int cap){
      int n = cap -1;
      n |= n >>> 1;
      n |= n >>> 2;
      n |= n >>> 4;
      n |= n >>> 8;
      n |= n >>> 16;
      return (n < 0) ? 1 : (n >= MAXIMUM_CAPACITY) ? MAXIMUM_CAPACITY : n + 1;
  }
  
  该函数的功能是对于给定的目标容量cap返回一个大于该cap的最小的2次幂数。
  >>>是无符号右移（高位补0），假设从右往左第一个非0位为最高位。
  右移1位再与移动前数字逐位异或，可以保证最高位和次高位均为1，结果中前2位均为1（如果最高位所在位数>1）；      
  将上步结果右移2位再与移动前数字逐位异或，可以保证高2位和次高2位均为1，结果中前4位均为1（如果最高位所在位数>4,否则最高位以下全1）；
  将上步结果右移4位再与移动前数字逐位异或，可以保证高4位和次高4位均为1，结果中前8位均为1（如果最高位所在位数>8,否则最高位以下全1）；
  将上步结果右移8位再与移动前数字逐位异或，可以保证高8位和次高8位均为1，结果中前16位均为1（如果最高位所在位数>16,否则最高位以下全1）；
  之后类似。
  如果传进来的参数已经是2的次幂了，就不需要变换了，如果变换会浪费空间，所以函数开头有一个n = cap - 1;
