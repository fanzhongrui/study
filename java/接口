接口（interface）
接口是抽象方法和常量值的定义的集合。
从本质上讲，接口是一种特殊的抽象类，这种抽象类中只包含常量和方法的定义，而没有变量和方法的实现。
java是只支持单继承的，但现实中存在多重继承这种现象。为了封装现实生活中存在的多重继承现象，为了实现多继承，可以把其余的类封装成接口。
使用接口可以帮助我们实现多重继承。

接口：
多个无关的类可以实现同一个接口
一个类可以实现多个无关的接口
与继承关系类似，接口与实现类之间存在多态性。

接口的本质是一种特殊的抽象类，因此可以被不同的类继承，即所谓的多个无关的类可以实现同一个接口。
一个类通过实现多个接口来做到可以多重继承，每实现一个接口，就相当于是继承了某个类，实现多个接口，就相当于是继承多个类。

接口的本质：接口是一种特殊的抽象类，这种抽象类里面只包含常量和方法的定义，没有变量和方法的实现。
抽象类所具有的一些东西接口可以具有，假如一个抽象类里面所有的方法都是抽象的，没有任何一个方法需要这个抽象类去实现，
并且这个抽象类里面所有的变量都是静态（static）变量，都是不能改变（final）变量，这时可以把这样的抽象类定义为一个接口。
把一个类定义成一个接口的格式是把声明类的关键字class用声明接口的关键字interface替换掉即可。

接口的成员变量都是声明成“public static final 类型 属性名”，默认也是如此，不能改变，
也可以直接写成“类型 常量名＝value（值）”，前一部分可省略。
接口里声明的抽象方法可以不写abstract关键字标识，默认省略，且方法都是默认public的。
而抽象类里声明抽象方法必须要使用“abstract”

作为接口来说，一个类可以从接口继承（或者叫实现接口），这也是多继承，
接口里面的成员变量不专属于某个对象，都是静态的成员变量，是属于整个类的，因此一个类去实现多个接口也无所谓，
不会存在对象之间互相冲突的问题。
实现多个接口，也就实现了多重继承，而且又避免了多重继承容易出现问题的地方，这就是用接口实现多重继承的好处。

接口总结：接口和接口之间可以相互继承，类和接口之间，只能是类来实现接口。


