java序列化算法透析

Serialization（序列化）是一种将对象以一连串的字节描述的过程；反序列化（deserialization）是一种将这些字节重建成一个对象的过程。

如何序列化一个对象
一个对象能够序列化的前提是实现Serializable接口，Serializable接口没有方法，更像是个标记。
有了这个标记的class就能被序列化机制处理，否则抛出异常。

ObjectOutputStream：表示对象输出流，能把Object输出成Byte流。
它的writeObject（Object obj）方法可以对参数指定的obj对象进行序列化，把得到的字节序列写到一个目标输出流中。

ObjectInputStream：表示对象输入流，从持久的文件中读取Bytes重建对象。
它的readObject（）方法从输入流中读取字节序列，再把它们反序列化成为一个对象，并将其返回。

java的序列化算法一般会按步骤做如下事情：
  将对象实例相关的类元数据输出。
  递归地输出类的超类描述直到不再有超类。
  类元数据完了以后，开始从最顶层的超类开始输出对象实例的实际数据值。
  从上至下递归输出实例的数据。
  
假定一个Student类，它的对象需要序列化，可以有如下三种方法：
方法一：若student类仅仅实现了Serializable接口，则可以按照以下方式进行序列化和反序列化
ObjectOutputStream采用默认的序列化方式，对Student对象的非transient的实例变量进行序列化。
ObjectInputStream采用默认的反序列化方式，对Student对象的非transient的实例变量进行反序列化。

方法二：若student类仅仅实现了Serializable接口，
并且还定义了readObject（ObjectInputStream in）和writeObject（ObjectOutputStream out），
则采用以下方式进行序列化与反序列化。
ObjectOutputStream调用Student对象的writeObject（ObjectOutputStream out）的方法进行序列化。
ObjectInputStream会调用Student对象的readObject（ObjectInputStream in）的方法进行反序列化。

方法三：若student类实现了Externalizable接口，
且Student类必须实现readExternal（ObjectInput in）和writeExternal（ObjectOutput out）方法，
则按照以下方式进行序列化与反序列化。
ObjectOutputStream调用Student对象的writeExternal（ObjectOutput out）的方法进行序列化。
ObjectInputStream调用Student对象的readExternal（ObjectInput in）的方法进行反序列化。

JDK类库中序列化的步骤
步骤一：创建一个对象输出流，它可以包装一个其他类型的目标输出流，如文件输出流：
ObjectOutputStream out＝new objectOutputStream(new fileOutputStream("D:\\objectfile.obj"));
步骤二：通过对象输出流的writeObject（）方法写对象：
out.writeObject("hello");
out.writeObject(new Date());
为了正确读取数据，完成反序列化，必须保证向对象输出流写对象的顺序与从对象输入流中读对象的顺序一致。

java序列化就是把对象转换成字节序列，而java反序列化就是把字节序列还原成java对象。
采用java序列化与反序列化技术，一是可以实现数据的持久化，在MVC模式中比较有用；二是可以进行对象数据的远程通信。
对象的序列化主要有两种用途：
1）把对象的字节序列永久地保存到硬盘上，通常存放在一个文件中；
2）在网络上传送对象的字节序列。


serialVersionUID的作用
serialVersionUID：字面意思上是序列化的版本号，凡是实现Serializable接口的类都有一个表示序列化版本标识符的静态变量
private static final long serialVersionUID
实现Serializable接口的类中如果没有添加serialVersionUID，那么就会出现如下如下警告提示：
The serializable class does not declare a static final serialVersionUID field of type long
serialVersionUID有两种生成方式：

采用add default serial version ID这种方式生成的是serialVersionUID是1L，例如：
private static final long serivalVersionUID = 1L;
采用add generated serial version ID这种方式生成的serialVersionUID是根据类名，接口名，方法和属性等来生成的，例如
private static final long serialVersionUID = 46036423377807741L;

若序列化后添加一个字段或者方法：
文件流中的class和classpath中的class，也就是修改过后的class，不兼容了，出于安全机制考虑，程序抛出了错误，并且拒绝载入。
没有指定serivalVersionUID的，java编译器会自动给这个class进行一个摘要算法，类似于指纹算法，
只要这个文件多一个空格，得到的UID就会截然不同的，可以保证在这么多类中，这个编号是唯一的。
因此，只要我们自己指定了serivalVersionUID，就可以在序列化之后，去添加一个字段，或者方法，
而不会影响到后期的还原，还原后的对象照样可以使用。
但是还原过程不会调用任何构造方法，若不作任何处理，新属性初始值为null，不会调用构造函数中的初始化。
所以新属性需要显示初始化。

为了提高serialVersionUID的独立性和确定性，强烈建议在一个可序列化类中显示的定义serialVersionUID，为它赋予明确的值。













