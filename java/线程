线程
线程是一个程序内部的顺序控制流。
线程和进程的区别
每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销。
线程可以看成是轻量级的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。
多进程：在操作系统中能同时运行多个任务（程序）。
多线程：在同一应用程序中有多个顺序流同时执行

java的线程是通过java.lang.Thread类来实现的。
VM启动时会有一个由主方法（public static void main(){}）所定义的线程。
可以通过创建Thread的实例来创建新的线程。
每个线程都是通过某个特定Thread对象所对应的方法run（）来完成其操作的，方法run（）称为线程体；
通过调用Thread类的start（）方法来启动一个线程。

线程理解：线程是一个程序里面不同的执行路径
每一个分支都叫做一个线程，main（）叫做主分支，也叫主线程。
进程只是一个静态的概念，机器上的一个.class文件，一个.exe文件，叫做一个进程。
程序的执行过程都是这样的：首先把程序的代码放到内存的代码区里，代码放到代码区后并没有马上开始执行，
但这时候说明了一个进程准备开始，进程已经产生了，但是还没由开始执行，这就是进程，所以进程其实是一个静态的概念，
它本身就不能动。
通常所说的进程的执行指的是进程里面主线程开始执行了，也就是main（）方法开始执行了。
进程是一个静态的概念，在机器里面实际上运行的都是线程。
小结：
进程：进程是一个静态的概念
线程：一个进程里面有一个主线程叫main（）方法，是一个程序里面的，一个进程里面不同的执行路径。
在同一个时间点上，一个CPU只能支持一个线程在执行。因为CPU运行的速度很快，因此看起来的感觉就像是多线程一样。

线程的创建和启动
可以有两种方式创建新的线程
一：定义线程类实现Runnable接口
    Thread myThread = new Thread(target) //target为Runnable接口类型
    Runnable中只有一个方法：
        public  void  run（）：用以定义线程运行体。
    使用Runnable接口可以为多个线程提供共享数据。
    在实现Runnable接口的类的run方法定义中可以使用Thread的静态方法：
        public static Thread currentThread()获取当前线程的引用。
二：
    可以定义一个Thread的子类并重写其run方法如：
        class myThread extends Thread{
            public void run(){...}
        }
    然后生成该类的对象：
        myThread mt = new myThread(...)
        
使用实现Runnable接口和继承Thread类这两种开辟新线程的方法，应该优先选择实现Runnable接口这种方式。
因为接口的实现可以实现多个，而类的继承只能是单继承。
因此在开辟新线程时能够使用Runnable接口就尽量不要使用从Thread类继承的方式来开辟新的线程。

线程状态转换
就绪状态、运行状态、阻塞状态


wait和sleep比较：
    sleep方法有：sleep(long millis),sleep(long millis, long nanos),调用sleep方法后，当前线程进入休眠期，暂停执行，但该线程继续拥有监视资源的所有权。到达休眠时间后线程将继续执行，直到完成。
        若在休眠另一线程中中断该线程，则该线程退出。
    wait方法有：wait(),wait(long timeout),wait(long timeout, long nanos),调用wait方法后，该线程放弃监视资源的所有权进入等待状态；
        wait():等待有其他的线程调用notify（）或notifyAll（）进入调度状态，与其他线程共同争夺监视。wait()相当于wait(0),wait(0,0)
        wait(long timeout):当其他线程调用notif()或者notifyAll()，或时间到达timeout毫秒，或有其他某线程中断该线程，则该线程进入调度状态。
        wait(long timeout, long nanos):相当于wait(1000000*timeout+nanos),只不过时间单位为纳秒。
    

线程控制的基本方法
    isAlive():判断线程是否还“活”着，即线程是否还未终止
    getPriority():获得线程的优先级数值
    setPriority():设置线程的优先级数值
    Thread.sleep():将当前线程睡眠指定毫秒数
    join():调用某线程的该方法，将当前线程与该线程“合并”，即等待该线程结束，再恢复当前线程的运行。
    yield():让出CPU，当前线程进入就绪队列等待调度。
    wait():当前线程进入对象的wait pool
    notify()／notifyAll():唤醒对象的wait pool中的一个／所有等待线程。
    
sleep／join／yield方法介绍
    sleep方法：
        可以调用Thread的静态方法：
            public static void sleep(long millis)throws InterruptedException
            使得当前线程休眠（暂时停止执行millis毫秒）
        由于是静态方法，sleep可以由类名直接调用：
            Thread.sleep(...)
    join方法：合并某个线程
    yield方法：让出CPU，给其他线程执行的机会
    
线程的优先级别：
    java提供一个线程调度器来监控程序中启动后进入就绪状态的所有线程。
        线程调度器按照线程的优先级决定调度哪个线程来执行。
    线程的优先级用数字表示，范围从1到10，一个线程的缺省优先级是5.
        Thread.MIN_PRIORITY = 1;
        Thread.MAX_PRIORITY = 10;
        Thread.NORM_PRIORITY = 5
    使用下述线程方法获得或设置线程对象的优先级
        int getPriority();
        void setPriority(int newPriority);

线程同步
在java语言中，引入了对象互斥锁的概念，保证共享数据操作的完整性。
每个对象都对应于一个可称为“互斥锁”的标记，这个标记保证在任一时刻，只能有一个线程访问该对象。
关键字synchronized来与对象的互斥锁联系。
当某个对象被synchronized修饰时，表明该对象在任一时刻只能由一个线程访问。
    synchronized的使用方法：
        synchronized(this){
            num++;
            try{
                Thread.sleep(1);
            }catch(InterruptedException e){}
            System.out.println(name+",是第"+num+"个使用timer的线程");
        }
    synchronized还可以放在方法声明中，表示整个方法为同步方法，例如：
        synchronized public void add(String name){...}
    
在声明方法时加入synchronized时表示在执行这个方法的过程之中当前对象被锁定
在代码块前使用synchronized（this）来锁定当前对象，
这样就不会再出现两个不同的线程同时访问同一个对象资源的问题了，只有当一个线程访问结束后才会轮到下一个线程来访问

线程死锁的问题：
    最好只锁定一个对象，不要同时锁定两个对象

生产者消费者问题：
要点：
    1.共享数据的不一致性／临界资源的保护
    2.java对象锁的概念
    3.synchronized关键字／wait（）及notify（）方法
public class ProducerConsumer{
    public static void main(String args[]){
        SyncStack  stack = new SyncStack();
        Runnable p = new Producer(stack);
        Runnable c = new Consumer(stack);
        Thread p1 = new Thread(p);
        Thread c1 = new Thread(c);
        p1.start();
        c1.start();
    }
}
class SyncStack{//支持多线程同步操作的堆栈的实现
    private int index = 0;
    private char[] data = new char[6];
    public synchronized void push(char c){
        if(index == data.length){
            try{
                this.wait();
            }catch(InterruptedException e){}
        }
        this.notify();
        data[index] = c;
        index++;
    }
    public synchronized char pop(){
        if(index == 0){
            try{
                this.wait();
            }catch(InterruptedException e){}
        }
        this.notify();
        index--;
        return data[index];
    }
}
class Producer implements Runnable{
    SyncStack stack;
    public Producer(SyncStack s){
        stack = s;
    }
    public void run(){
        for(int i=0; i<20; i++){
            char c = (char)(Math.random()*26+'A');
            stack.push(c);
            System.out.println("produced:"+c);
            try{
                Thread.sleep((int)(Math.random()*1000));
            }catch(InterruptedException e){}
        }
    }
}
class Consumer implements Runnable{
    SyncStack stack;
    public Consumer(SyncStack s){
        stack = s;
    }
    public void run(){
        for(int i=0; i<20; i++){
            char c = stack.pop();
            System.out.println("消费："+c);
            try{
                Thread.sleep((int)(Math.random()*1000));
            }catch(InterruptedException e){}
        }
    }
}
    













