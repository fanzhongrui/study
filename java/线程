线程
线程是一个程序内部的顺序控制流。
线程和进程的区别
每个进程都有独立的代码和数据空间（进程上下文），进程间的切换会有较大的开销。
线程可以看成是轻量级的进程，同一类线程共享代码和数据空间，每个线程有独立的运行栈和程序计数器（PC），线程切换的开销小。
多进程：在操作系统中能同时运行多个任务（程序）。
多线程：在同一应用程序中有多个顺序流同时执行

java的线程是通过java.lang.Thread类来实现的。
VM启动时会有一个由主方法（public static void main(){}）所定义的线程。
可以通过创建Thread的实例来创建新的线程。
每个线程都是通过某个特定Thread对象所对应的方法run（）来完成其操作的，方法run（）称为线程体；
通过调用Thread类的start（）方法来启动一个线程。

线程理解：线程是一个程序里面不同的执行路径
每一个分支都叫做一个线程，main（）叫做主分支，也叫主线程。
进程只是一个静态的概念，机器上的一个.class文件，一个.exe文件，叫做一个进程。
程序的执行过程都是这样的：首先把程序的代码放到内存的代码区里，代码放到代码区后并没有马上开始执行，
但这时候说明了一个进程准备开始，进程已经产生了，但是还没由开始执行，这就是进程，所以进程其实是一个静态的概念，
它本身就不能动。
通常所说的进程的执行指的是进程里面主线程开始执行了，也就是main（）方法开始执行了。
进程是一个静态的概念，在机器里面实际上运行的都是线程。
小结：
进程：进程是一个静态的概念
线程：一个进程里面有一个主线程叫main（）方法，是一个程序里面的，一个进程里面不同的执行路径。
在同一个时间点上，一个CPU只能支持一个线程在执行。因为CPU运行的速度很快，因此看起来的感觉就像是多线程一样。

线程的创建和启动
可以有两种方式创建新的线程
一：定义线程类实现Runnable接口
    Thread myThread = new Thread(target) //target为Runnable接口类型
    Runnable中只有一个方法：
        public  void  run（）：用以定义线程运行体。
    使用Runnable接口可以为多个线程提供共享数据。
    在实现Runnable接口的类的run方法定义中可以使用Thread的静态方法：
        public static Thread currentThread()获取当前线程的引用。
二：
    可以定义一个Thread的子类并重写其run方法如：
        class myThread extends Thread{
            public void run(){...}
        }
    然后生成该类的对象：
        myThread mt = new myThread(...)
        
使用实现Runnable接口和继承Thread类这两种开辟新线程的方法，应该优先选择实现Runnable接口这种方式。
因为接口的实现可以实现多个，而类的继承只能是单继承。
因此在开辟新线程时能够使用Runnable接口就尽量不要使用从Thread类继承的方式来开辟新的线程。


















