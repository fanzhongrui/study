Java对象的大小
    基本数据类型的大小是固定的。但是对于非基本类型的Java对象，就不是这样。
    在Java中，一个空Object对象的大小是8byte，这只是保存堆中一个没有任何属性的对象的大小。
    
    Object ob = new Object();
    这样一个Java对象所占的空间为：4byte+8byte。
    4byte是Java栈中保存引用所需的空间
    8byte是Java堆中对象的信息。
    
    因为所有的Java非基本类型的对象都需要默认继承Object对象，因此不论什么样的Java对象，其大小都必须大于8byte。
    class newObjcet{
        int count;
        boolean flag;
        Object obj;
    }
    其大小为：空对象大小（8byte）+ int大小（4byte）+ Boolean大小（1byte）+ 空Object引用的大小（4byte）=17byte
    但是因为Java在对象内存分配时都是以8的整数倍来分，因此大于17byte的最接近8的整数倍的是24，因此此对象的大小为24byte。
    
    对于包装类型的对象，其大小至少是12byte（声明一个空Object至少需要的空间），而且这12byte没有包含任何有效信息，
    同时，因为Java对象大小是8的整数倍，因此一个基本类型包装类的大小至少是16byte。
    可能的话，尽量少使用包装类，在JDK5。0以后，因为加入了自动类型转换，因此，Java虚拟机会在存储方面进行相应的优化。
    
引用类型
    对象引用类型分为强引用、软引用、弱引用和虚引用。
    
    强引用：一般声明对象时，虚拟机生成的引用，强引用环境下，垃圾回收需要严格判断当前对象是否被强引用，如果被强引用，则不会被垃圾回收
    软引用：软引用一般被作为缓存使用。与强引用的区别是，软引用在垃圾回收时，虚拟机会根据当前系统的剩余内存来决定是否对软引用进行回收。
        如果剩余内存比较紧张，则虚拟机会回收软引用所引用的空间；如果剩余内存相对富裕，则不会进行回收。
        即，虚拟机在发生outofmemory时，肯定是没有软引用存在的。
    弱引用：弱引用与软引用类似，都是作为缓存来使用的。但与软引用不同，弱引用在进行垃圾回收时，是一定会被回收掉的，因此其生命周期只存在于一个垃圾回收周期内。
    虚引用：
