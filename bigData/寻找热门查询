寻找热门查询

    搜索引擎会通过日志文件把用户每次检索的所有查询串都记录下来，每个查询串的长度为1～255个字节。假设目前有1000万条查询记录（但是，因为这些查询串的重复度比较高，去重后，查询串query不超过300万个），
        请统计其中最热门的10个查询串，要求使用的内存不能超过1GB。
      
      分析：一个查询串的重复度越高说明查询它的用户越多越热门。
          如果是1亿个IP求top 10，可先％1000将IP分到1000个小文件中，并保证一个IP只出现在一个文件中，
          再对每个小文件中的IP进行hash_map统计并按数量排序，最后用归并或者最小堆依次处理每个小文件中的Top 10以得到最后的结果。
          
          但是对于本题，是否也需要先把大文件弄成小文件呢？
            根据题目描述，虽然有1000万个查询，但是因为重复读比较高，去除重复后，事实上只有300万个查询，
            每个查询为255字节，所以可以考虑把它们全部放进内存中去（假设300万个字符串没有重复，都是最大长度，
            那么最多占用内存3000000*255=765MB＝0.765GB，所以可以将所有字符串都存放在内存中进行处理）。
            
        考虑到本题中的数据规模比较小，能一次性装入内存，因而放弃分而治之／散列映射的步骤，直接用hash_map统计，然后排序。
        事实上，针对此类典型的Top k问题，采取的对策一般都是“分而治之／散列映射（如有必要）＋hash_map+堆”。
        
    解法：
        （1）hash_map统计。对这批海量数据进行预处理，用hash_map完成频率统计。
            具体做法是：
                    维护一个键为query、value为该query出现次数的hash_map，即hash_map(query, value),
                    每次读取一个query，如果该query不在hash_map中，那么将该query放入hash_map中，并将它的value值设为1；
                    如果该query在hash_map中，那么将该query的计数value加1即可。
                    最终用hash_map在O（n）的时间复杂度内完成了所有的query的频率统计。
        （2）堆排序。借助堆这种数据结构，找出Top k，时间复杂度为O（n‘logk）。
            借助堆可以在对数级的时间内查找或调整移动。
            因此，维护一个k大小的最小堆，然后遍历300万个query，分别和根元素进行比较，最终的时间复杂度是O（n）＋O（n’logk），
            其中n为1000万，n‘为300万。
            
            关于上述过程中的第2步（堆排序），进一步讲，可以维护k个元素的最小堆，即用容量为k的最小堆存储最先遍历到的k个数，
            并假设它们就是最大的k个数，建堆费时O（k），有k1>k2>...>k(min)(设k（min）为最小堆中元素)。
            继续遍历整个数列剩下的n－k个元素，每次遍历一个元素x，将其与堆顶元素进行比较，
            若x>kmin则更新堆（x入堆，每次调整堆费时O（logk））否则不更新堆。
            总费时O（k＋(n-k)logk）=O(nlogk)
            此方法得益于在堆中查找等各项操作的时间复杂度均为O（logk）。
            
            还可以采用Trie树，节点里存该查询串出现的次数，没有出现则为0，最后用10个元素的最小堆来对出现频率进行排序。
            
            
