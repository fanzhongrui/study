##前序遍历和中序遍历树构造二叉树
/**
 * Definition of TreeNode:
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left, right;
 *     public TreeNode(int val) {
 *         this.val = val;
 *         this.left = this.right = null;
 *     }
 * }
 */
 
 
public class Solution {
    /**
     *@param preorder : A list of integers that preorder traversal of a tree
     *@param inorder : A list of integers that inorder traversal of a tree
     *@return : Root of a tree
     */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        // write your code here
        if(preorder == null || preorder.length == 0)return null;
        else if(preorder.length == 1) return new TreeNode(preorder[0]);
        TreeNode root = new TreeNode(preorder[0]);
        int cnt = 0;
        for(int i=0; i<inorder.length; i++){
            if(inorder[i] == preorder[0])break;
            cnt++;
        }
        if(cnt > 0){
            int[] p1 = new int[cnt];
            int[] p2 = new int[cnt];
            for(int i=0; i<cnt; i++){
                p1[i] = preorder[i+1];
                p2[i] = inorder[i];
            }
            root.left = buildTree(p1,p2);
        }
        int c2 = preorder.length-cnt;
        if( c2 > 1){
            int[] p1 = new int[c2 - 1];
            int[] p2 = new int[c2 - 1];
            for(int i=0; i < c2-1; i++){
                p1[i] = preorder[cnt+1+i];
                p2[i] = inorder[cnt+1+i];
            }
            root.right = buildTree(p1,p2);
        }
        return root;
    }
}
